name: Media Generation

on:
  schedule:
    - cron: '0 2 * * *'  # Daily 2 AM UTC
  workflow_dispatch:
    inputs:
      scenario:
        description: 'Scenario to generate'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - A
          - B
          - C
          - D
          - E
      skip_optimization:
        description: 'Skip video optimization'
        type: boolean
        default: false

permissions:
  contents: write
  actions: write

env:
  PYTHONUNBUFFERED: "1"
  UV_SYSTEM_PYTHON: "1"

jobs:
  generate:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment: media-automation

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Setup Git LFS
        run: |
          git lfs install
          git lfs pull

      - name: Install VHS
        run: |
          curl -fsSL https://github.com/charmbracelet/vhs/releases/download/v0.10.0/vhs_0.10.0_Linux_x86_64.tar.gz -o vhs.tar.gz
          tar -xzf vhs.tar.gz
          sudo mv vhs_*/vhs /usr/local/bin/
          vhs --version

      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          ffmpeg -version

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install Python dependencies
        run: uv sync --all-extras

      - name: Validate API Key Availability
        id: validate_api
        run: |
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "info=API key not available" >> "$GITHUB_OUTPUT"
            echo "⚠️ Anthropic API key not configured in secrets"
            echo "Using Ollama as fallback provider for demo"
          else
            echo "info=API key available" >> "$GITHUB_OUTPUT"
            echo "✓ Anthropic API key is configured"
          fi

      - name: Configure AI Provider
        run: |
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "Using Ollama as provider (cost-free)"
            PROVIDER_CONFIG="ollama"
            MODEL_CONFIG="llama3.2"
            API_KEY_CONFIG=""
          else
            echo "Using Anthropic as provider (with cost controls)"
            PROVIDER_CONFIG="anthropic"
            MODEL_CONFIG="claude-4.5-sonnet"
            API_KEY_CONFIG="${{ secrets.ANTHROPIC_API_KEY }}"
          fi

          cat > .env <<EOF
          # Database
          DATABASE_URL=sqlite:///./openfatture_demo.db

          # Cedente (demo data)
          CEDENTE_DENOMINAZIONE="OpenFatture Demo Studio"
          CEDENTE_PARTITA_IVA=04567890123
          CEDENTE_CODICE_FISCALE=DMOGLC85A01H501Y
          CEDENTE_REGIME_FISCALE=RF19
          CEDENTE_INDIRIZZO="Via Digitale 42"
          CEDENTE_CAP=20100
          CEDENTE_COMUNE=Milano
          CEDENTE_PROVINCIA=MI
          CEDENTE_NAZIONE=IT
          CEDENTE_TELEFONO="+39 02 1234567"
          CEDENTE_EMAIL=demo@openfatture.dev

          # AI Configuration - Safe defaults with fallback
          OPENFATTURE_AI_PROVIDER=$PROVIDER_CONFIG
          OPENFATTURE_AI_ANTHROPIC_MODEL=$MODEL_CONFIG
          OPENFATTURE_AI_OLLAMA_MODEL=llama3.2
          OPENFATTURE_AI_ANTHROPIC_API_KEY=$API_KEY_CONFIG
          OPENFATTURE_AI_TEMPERATURE=0.7
          OPENFATTURE_AI_MAX_TOKENS=1000  # Conservative default to control costs
          OPENFATTURE_AI_MAX_COST_PER_REQUEST_USD=0.10  # Cost control
          OPENFATTURE_AI_DAILY_BUDGET_USD=1.0  # Daily budget limit
          OPENFATTURE_AI_WARN_COST_THRESHOLD_USD=0.05  # Warning threshold
          OPENFATTURE_AI_CHAT_ENABLED=true
          OPENFATTURE_AI_TOOLS_ENABLED=false  # Disable tools to reduce costs

          # Notifications
          NOTIFICATION_EMAIL=ci@openfatture.dev
          NOTIFICATION_ENABLED=false
          LOCALE=it
          EOF

          echo "✓ AI configured with provider: $PROVIDER_CONFIG"

      - name: Verify AI configuration
        id: verify_ai
        run: |
          uv run python -c "
          from openfatture.ai.config.settings import get_ai_settings
          settings = get_ai_settings()
          print(f'Provider: {settings.provider}')
          print(f'Model: {settings.get_model_for_provider()}')
          print(f'Configured: {settings.is_provider_configured()}')
          print(f'Max tokens: {settings.max_tokens}')
          print(f'Daily budget: ${settings.daily_budget_usd}')
          print(f'Max cost per request: ${settings.max_cost_per_request_usd}')
          assert settings.provider in ['anthropic', 'ollama']
          assert settings.max_tokens <= 1000  # Cost control check
          assert settings.daily_budget_usd <= 1.0  # Budget control check
          assert settings.is_provider_configured() or settings.provider == 'ollama'  # Ollama doesn't need API key
          print('✓ AI configuration verified with cost controls')

          # Write provider and model info to outputs
          with open('provider_info.txt', 'w') as f:
              f.write(f'{settings.provider}\\n')
              f.write(f'{settings.get_model_for_provider()}\\n')
          "

          # Read the provider and model info
          PROVIDER=$(sed -n '1p' provider_info.txt)
          MODEL=$(sed -n '2p' provider_info.txt)
          echo "provider=$PROVIDER" >> "$GITHUB_OUTPUT"
          echo "model=$MODEL" >> "$GITHUB_OUTPUT"

      - name: Reset demo environment with cost controls
        run: |
          chmod +x scripts/reset_demo.sh

          # Set environment variables to ensure cost-efficient demo
          export AI_TEMPERATURE=0.1  # Lower temperature = less creativity = fewer retries
          export AI_CHAT_ENABLED=false  # Disable interactive chat during demo
          export AI_TOOLS_ENABLED=false  # Disable tools to reduce costs

          # Run reset with the configured provider
          ./scripts/reset_demo.sh
          echo "✓ Demo environment ready with cost controls"

      - name: Generate video(s)
        run: |
          scenario="${{ github.event.inputs.scenario || 'all' }}"

          # Set timeout for each video generation to prevent runaway processes
          export VHS_TIMEOUT=120  # 2 minutes per scenario max

          if [ "$scenario" = "all" ]; then
            echo "→ Generating all scenarios with timeout protection..."
            # Run each scenario with timeout to prevent excessive costs
            for s in A B C D E; do
              echo "→ Generating scenario $s..."
              timeout $VHS_TIMEOUT make media-scenario$s || echo "⚠️ Scenario $s failed or timed out (expected for API-requiring scenarios without key)"
            done
          else
            echo "→ Generating scenario $scenario with timeout protection..."
            timeout $VHS_TIMEOUT make media-scenario${scenario} || {
              echo "⚠️ Scenario $scenario failed or timed out"
              if [ "$scenario" = "C" ]; then
                echo "ℹ️ Scenario C may fail without Ollama available"
              else
                echo "ℹ️ This may be due to missing API key or other configuration"
              fi
            }
          fi

      - name: Check generated videos
        id: check_videos
        run: |
          if compgen -G "media/output/*.mp4" > /dev/null; then
            echo "found=true" >> "$GITHUB_OUTPUT"
            echo "✓ MP4 assets detected in media/output/"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
            echo "ℹ️  No MP4 assets generated in media/output/"
          fi

      - name: No videos generated
        if: steps.check_videos.outputs.found != 'true'
        run: echo "Skipping artifact upload and optimization trigger (no videos produced)."

      - name: List generated videos
        if: steps.check_videos.outputs.found == 'true'
        run: |
          echo "Generated videos:"
          ls -lh media/output/*.mp4 | awk '{print "  " $9 " (" $5 ")"}'

          total_size=$(du -ch media/output/*.mp4 | grep total | awk '{print $1}')
          echo "Total size: $total_size"

      - name: Validate video files
        if: steps.check_videos.outputs.found == 'true'
        id: validate_videos
        run: |
          echo "Validating video files..."
          all_valid=true

          for video in media/output/*.mp4; do
            echo "Validating: $video"

            # Check if file exists and has content
            if [ ! -f "$video" ] || [ ! -s "$video" ]; then
              echo "❌ $video does not exist or is empty"
              all_valid=false
              continue
            fi

            # Check file size (min 10KB to catch empty/truncated files)
            size=$(stat -c%s "$video")
            if [ "$size" -lt 10240 ]; then
              echo "❌ $video is too small (only $size bytes)"
              all_valid=false
              continue
            fi

            # Use ffprobe to check if it's a valid MP4 file with moov atom
            if ! timeout 10s ffprobe -v quiet -show_format -show_streams "$video" >/dev/null 2>&1; then
              echo "❌ $video is not a valid video file or is corrupted"
              all_valid=false
              continue
            fi

            # Check for moov atom specifically using ffmpeg/ffprobe
            if ! ffprobe -v quiet -show_format "$video" 2>/dev/null | grep -q "moov"; then
              echo "❌ $video is missing moov atom and will fail optimization"
              all_valid=false
              continue
            fi

            echo "✓ $video is valid"
          done

          if [ "$all_valid" = "true" ]; then
            echo "validated=true" >> "$GITHUB_OUTPUT"
            echo "✓ All video files are valid"
          else
            echo "validated=false" >> "$GITHUB_OUTPUT"
            echo "❌ Some video files are invalid"
            exit 1  # Fail the step if any video is invalid
          fi

      - name: Upload videos as artifacts
        if: steps.check_videos.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: media-videos-${{ github.run_number }}
          path: media/output/*.mp4
          if-no-files-found: warn
          retention-days: 7
          compression-level: 0  # Videos are already compressed

      - name: Trigger optimization workflow
        if: ${{ steps.check_videos.outputs.found == 'true' && steps.validate_videos.outputs.validated == 'true' && !inputs.skip_optimization }}
        uses: actions/github-script@v7
        continue-on-error: true  # Continue even if optimization trigger fails
        id: trigger_optimization
        with:
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'media-optimization-trigger',
              client_payload: {
                run_id: context.runId
              }
            })

      - name: Report optimization trigger status
        if: ${{ steps.check_videos.outputs.found == 'true' && steps.validate_videos.outputs.validated == 'true' && !inputs.skip_optimization }}
        run: |
          if [ "${{ steps.trigger_optimization.outcome }}" = "failure" ]; then
            echo "⚠️  Warning: Failed to trigger optimization workflow"
            echo "This may be due to repository permissions or the optimization workflow being disabled."
            echo "Generated videos are valid and available as artifacts, but will not be optimized."
          else
            echo "✓ Successfully triggered optimization workflow"
          fi

      - name: Generate cost and usage summary
        run: |
          PROVIDER="${{ steps.verify_ai.outputs.provider }}"

          echo "## 🎬 Media Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check_videos.outputs.found }}" != "true" ]; then
            echo "No videos were generated during this run." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          echo "**Scenario:** ${{ github.event.inputs.scenario || 'all' }}" >> $GITHUB_STEP_SUMMARY

          if [ "$PROVIDER" = "anthropic" ]; then
            echo "**Provider:** Anthropic (controlled costs)" >> $GITHUB_STEP_SUMMARY
            echo "**Cost Controls Active:** ✅ Max tokens: 1000, Daily budget: $1.00" >> $GITHUB_STEP_SUMMARY
            echo "**Estimated Cost Range:** USD 0.05 - 0.50 (depending on video length and AI usage)" >> $GITHUB_STEP_SUMMARY
          elif [ "$PROVIDER" = "ollama" ]; then
            echo "**Provider:** Ollama (cost-free local)" >> $GITHUB_STEP_SUMMARY
            echo "**Cost Controls Active:** ✅ All AI usage is local, no API costs" >> $GITHUB_STEP_SUMMARY
            echo "**Estimated Cost:** USD 0.00" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Provider:** $PROVIDER" >> $GITHUB_STEP_SUMMARY
          fi

          echo "**Model:** ${{ steps.verify_ai.outputs.model }}" >> $GITHUB_STEP_SUMMARY
          echo "**Videos Generated:** $(find media/output -maxdepth 1 -name '*.mp4' -type f | wc -l)" >> $GITHUB_STEP_SUMMARY

          # Add validation status to summary
          if [ "${{ steps.validate_videos.outputs.validated }}" = "true" ]; then
            echo "**Validation:** ✅ All videos are valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Validation:** ❌ Some videos are invalid" >> $GITHUB_STEP_SUMMARY
          fi

          # Add execution metrics
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Files:" >> $GITHUB_STEP_SUMMARY
          find media/output -maxdepth 1 -name '*.mp4' -type f -print0 | xargs -0 ls -lh | awk '{print "- " $9 " (" $5 ")"}' >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Cost & Safety Measures:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ API key validation performed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Fallback to Ollama when Anthropic key unavailable" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Max tokens limited to 1000 per request" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Daily budget set to $1.00 maximum" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Timeout protection (2 min max per scenario)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Video validation before optimization" >> $GITHUB_STEP_SUMMARY
